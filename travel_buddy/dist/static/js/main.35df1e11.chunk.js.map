{"version":3,"sources":["assets/user1.png","assets/background.jpg","Components/Card.js","Components/SearchBar.js","Components/HostInfo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","user","getCards","a","axios","get","then","response","console","log","className","style","maxWidth","name","display","paddingLeft","verticalAlign","height","src","pic","alt","flexGrow","country","type","onClick","SearchBar","paddingTop","placeholder","aria-label","HostInfo","location","query","id","App","useState","users","setUsers","useEffect","method","url","res","data","exact","path","backgroundImage","background","paddingBottom","color","length","map","maxHeight","textAlign","key","_id","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","addEventListener","serviceWorker","register","registration","scope","err","catch"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,oOCkC5BC,EA7BF,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACPC,EAAQ,uCAAG,sBAAAC,EAAA,sDACfC,IAAMC,IAAI,kCAAkCC,MAAK,SAACC,GAAYC,QAAQC,IAAIF,MAD3D,2CAAH,qDAId,OACE,yBAAKG,UAAU,OAAOC,MAAO,CAACC,SAAU,UACtC,yBAAKF,UAAU,aACb,6BACA,wBAAIA,UAAU,cAAcT,EAAKY,OAEjC,yBAAKF,MAAO,CAACG,QAAS,SACpB,yBAAKH,MAAO,CAACI,YAAa,SACxB,yBAAKJ,MAAO,CAACK,cAAe,SAAUC,OAAO,QAASC,IAAKC,IAAKC,IAAI,MAEtE,yBAAKV,UAAU,aAAaC,MAAO,CAACU,SAAU,IAAKN,YAAa,SAC9D,uBAAGL,UAAU,aAAaC,MAAO,CAACU,SAAU,MAAOpB,EAAKqB,SACxD,yBAAKZ,UAAU,cACb,4BAAQA,UAAU,0BAA0Ba,KAAK,SAASC,QAAStB,GAAnE,gBCbCuB,EARG,WAChB,OACE,yBAAKf,UAAU,eAAeC,MAAO,CAACe,WAAY,SAC9C,2BAAOhB,UAAU,eAAea,KAAK,OAAOI,YAAY,SAASC,aAAW,aCSrEC,G,MAXC,WAEd,OACC,mC,GACUC,SAASC,MAAMC,M,gCC8CbC,EAtCH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,KAcZ,OAXJC,qBAAU,YACM,uCAAG,4BAAAlC,EAAA,sEACGC,IAAM,CACtBkC,OAAQ,MACRC,IAAK,mCAHQ,OACTC,EADS,OAKfJ,EAASI,EAAIC,MALE,2CAAH,qDAOdvC,KACA,IAGI,kBAAC,IAAD,KACE,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOwC,OAAK,EAACC,KAAO,KACpB,yBAAMhC,MAAO,CAACiC,gBAAgB,OAAD,OAASC,IAAT,OAC3B,yBAAKnC,UAAU,WACX,kBAAC,EAAD,MACA,uBAAGA,UAAY,KAAKC,MAAO,CAACe,WAAY,OAAQoB,cAAe,OAAQC,MAAO,UAA9E,aAAmGZ,EAAMa,OAAzG,wDACGb,EAAMc,KAAI,SAAChD,GAAD,OACX,yBAAKU,MAAO,CAACuC,UAAW,QAASC,UAAW,SAAUL,cAAe,SACnE,kBAAC,EAAD,CAAMM,IAAOnD,EAAKoD,IAAKpD,KAAQA,WAMzC,kBAAC,IAAD,CAAO0C,KAAO,UACV,kBAAC,EAAD,UClCMW,QACW,cAA7BC,OAAOzB,SAAS0B,UAEe,UAA7BD,OAAOzB,SAAS0B,UAEhBD,OAAOzB,SAAS0B,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SAE7C,kBAAmBC,UACrBP,OAAOQ,iBAAiB,QAAQ,WAC9BD,UAAUE,cAAcC,SAAS,aAAa3D,MAAK,SAAS4D,GAC1D1D,QAAQC,IAAI,iCAAkCyD,EAAaC,UAC1D,SAASC,GACV5D,QAAQC,IAAI,6BAA8B2D,MACzCC,OAAM,SAASD,GAChB5D,QAAQC,IAAI2D,SAIhB5D,QAAQC,IAAI,iD","file":"static/js/main.35df1e11.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user1.1897f975.png\";","module.exports = __webpack_public_path__ + \"static/media/background.ada9cf93.jpg\";","import React from 'react';\nimport pic from '../assets/user1.png';\nimport axios from 'axios'\n\n\nconst Card = ({user}) => {\n  const getCards = async () => {\n    axios.get('http://3.8.56.93:3000/profiles').then((response)=>{console.log(response)});\n  }\n\n  return (\n    <div className=\"card\" style={{maxWidth: \"400px\"}}>\n      <div className=\"card-body\">\n        <div>\n        <h4 className=\"text-right\">{user.name}</h4>\n        </div>\n        <div style={{display: \"flex\"}}>\n          <div style={{paddingLeft: \"10px\"}}>\n            <img style={{verticalAlign: \"middle\", height:\"50px\"}} src={pic} alt=\"\"/>\n          </div>\n          <div className=\"text-rigth\" style={{flexGrow: \"1\", paddingLeft: \"40px\"}}>\n            <p className=\"text-right\" style={{flexGrow: \"1\"}}>{user.country}</p>\n            <div className=\"text-right\">\n              <button className=\"btn btn-info text-right\" type=\"button\" onClick={getCards}>Button</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    \n  );\n}\n\nexport default Card;\n","import React from 'react';\n\nconst SearchBar = () => {\n  return (\n    <div className=\"md-form mt-0\" style={{paddingTop: \"20px\"}}>\n        <input className=\"form-control\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\"></input>\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import React from 'react';\n\n\nconst HostInfo= () => {\n\n  return (\n   <div>\n       {this.location.query.id}\n   </div>\n    \n    \n  );\n}\n\nexport default HostInfo;\n","import React, {useState, useEffect} from 'react';\nimport './Animations.css';\nimport Card from './Components/Card'\nimport SearchBar from './Components/SearchBar';\nimport './App.css';\nimport axios from 'axios';\nimport HostInfo from './Components/HostInfo';\nimport background from './assets/background.jpg'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    const getCards = async () => {\n      const res = await axios({\n        method: 'get',\n        url: 'http://3.8.56.93:3000/profiles',\n      });\n      setUsers(res.data);\n    }\n    getCards();\n  },[])\n\n      return (\n        <Router>\n          <Switch>\n          <Route exact path = \"/\">\n          <div  style={{backgroundImage: `url(${background})`}}>\n            <div className=\"App m-3\">\n                <SearchBar />\n                <p className = \"h6\" style={{paddingTop: \"20px\", paddingBottom: \"20px\", color: \"white\"}}>There are {users.length} hosts found in Lebanon. Choose your favourite one !</p>\n                  {users.map((user) => \n                  <div style={{maxHeight: \"200px\", textAlign: \"center\", paddingBottom: \"20px\"}}>\n                    <Card key = {user._id} user = {user}/> \n                  </div>\n                  )}\n            </div>\n          </div>\n          </Route>\n          <Route path = \"/hosts\"> \n              <HostInfo/>\n          </Route>\n          </Switch>\n        </Router>\n      );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker.register('worker.js').then(function(registration) {\n      console.log('Worker registration successful', registration.scope);\n    }, function(err) {\n      console.log('Worker registration failed', err);\n    }).catch(function(err) {\n      console.log(err);\n    });\n  });\n} else {\n  console.log('Service Worker is not supported by browser.');\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}